"""
Django settings for sensor_portal project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import datetime
import json
import logging
import os
from datetime import timedelta
from glob import glob
from pathlib import Path

from celery.schedules import crontab
from data_handlers.base_data_handler_class import DataTypeHandlerCollection

logger = logging.getLogger(__name__)

logger.info(f"[{datetime.datetime.now()}] Reading settings")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_ROOT = os.path.abspath('/media/file_storage')
MEDIA_URL = 'media/'

FILE_STORAGE_ROOT = '/media/file_storage'
FILE_STORAGE_URL = 'storage/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

DEVMODE = os.environ.get('DEV') is not None

if DEVMODE:
    SECRET_KEY = 'django-insecure-c-=p42@cm%8sy6-49_32*1g31eh*_w^nj)is51-%$m49zwkvm7'
else:
    SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', None)


FIELD_ENCRYPTION_KEY = os.environ.get(
    'FIELD_ENCRYPTION_KEY', "FrMHRMwLSdQytSjWRAIwaFPzzWC1R5XIPaH6HQbcryA=")

STATIC_URL = 'staticfiles/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'staticfiles'),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

ALLOWED_HOSTS = os.environ.get(
    'DJANGO_ALLOWED_HOSTS', "localhost 127.0.0.1 [::1]").split(" ")

CSRF_TRUSTED_ORIGINS = os.environ.get(
    'DJANGO_CSRF', "https://*.127.0.0.1").split(" ")

CSRF_COOKIE_DOMAIN = os.environ.get(
    'DJANGO_CSRF_COOKIE_DOMAIN', '127.0.0.1')


if DEVMODE:
    logger.info(f"[{datetime.datetime.now()}] Running in dev mode")
    DEBUG = True
    CORS_ALLOW_ALL_ORIGINS = True
else:
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOWED_ORIGINS = CSRF_TRUSTED_ORIGINS
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    USE_X_FORWARDED_PORT = True
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_SAMESITE = 'Strict'
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    # SECURE_SSL_REDIRECT = True
    X_FRAME_OPTIONS = 'DENY'
    # set low, but when site is ready for deployment, set to at least 15768000 (6 months)
    SECURE_HSTS_SECONDS = 15768000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True


CORS_ORIGINS_WHITELIST = CSRF_TRUSTED_ORIGINS
CSRF_USE_SESSIONS = True


GDAL_LIBRARY_PATH = glob('/usr/lib/libgdal.so.*')[0]
GEOS_LIBRARY_PATH = glob('/usr/lib/libgeos_c.so.*')[0]


# DRF_RECAPTCHA_TESTING=True

# Application definition
GENERIC_JOBS = {}
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'django.contrib.sites',
    'django_filters',
    'django.contrib.postgres',
    "rest_framework",
    "rest_framework_gis",
    "rest_framework.authtoken",
    # celery
    'django_celery_results',
    'django_celery_beat',
    # additional extensions
    'bridgekeeper',
    'debug_toolbar',
    'corsheaders',
    'rest_framework_simplejwt.token_blacklist',
    'encrypted_model_fields',
    'django_rest_passwordreset',
    'drf_recaptcha',
    'colorfield',
    'django_icon_picker',
    'drf_spectacular',
    'dbbackup',
    # my apps
    'data_models',
    'user_management',
    'external_storage_import',
    'utils',
    'archiving',
    'observation_editor',
    'data_packages',
    'ai_integration',
    'data_handlers',
    'uva_jobs',
    'dsi'
]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',

]

ROOT_URLCONF = 'sensor_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sensor_portal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.postgresql',
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': os.environ.get('POSTGRES_NAME', "postgres"),
        'USER': os.environ.get('POSTGRES_USER', "postgres"),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', "postgres"),
        'HOST': 'sensor_portal_db',
        'PORT': 5432,
        'CONN_MAX_AGE': 600
    }
}
AUTH_USER_MODEL = "user_management.User"

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'bridgekeeper.backends.RulePermissionBackend',
)

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

USE_L10N = False  # allow use of custom datetime formats
DATE_FORMAT = "Y-m-d"
DATETIME_FORMAT = 'c'
TIME_FORMAT = "H:i:s e"
SHORT_DATETIME_FORMAT = 'Y-n-j G:i:s'

SITE_ID = 1


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['bridgekeeper.rest_framework.RuleFilter',
                                'django_filters.rest_framework.DjangoFilterBackend',
                                'rest_framework.filters.SearchFilter', 'rest_framework.filters.OrderingFilter'],
    'DEFAULT_PERMISSION_CLASSES': (
        'bridgekeeper.rest_framework.RulePermissions',
    ),
    'DEFAULT_PAGINATION_CLASS': 'utils.paginators.VariablePagePaginator',
    'PAGE_SIZE': 50,
    'MAX_PAGE_SIZE': 100,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',


    ],
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        # 'rest_framework.renderers.BrowsableAPIRenderer'
        'utils.api_renderer.BrowsableAPIRendererWithoutForms',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Sensor portal API',
    'DESCRIPTION': 'API for ARISE MDS Sensor portal',
    'VERSION': '0.7.5',
    'SERVE_INCLUDE_SCHEMA': False,
    'OAS_VERSION': '3.1.0',
    'COMPONENT_NO_READ_ONLY_REQUIRED': True,
    'COMPONENT_SPLIT_REQUEST': True,
}
if DEVMODE:
    DRF_RECAPTCHA_TESTING = True

DRF_RECAPTCHA_SECRET_KEY = os.environ.get(
    'DRF_RECAPTCHA_SECRET_KEY', None)

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': os.environ.get("CELERY_BROKER", "redis://redis:6379/0")
    }
}


LOG_LEVEL = os.environ.get("LOG_LEVEL", logging.INFO)
LOGGING = {
    "version": 1,
    # This will leave the default Django logging behavior in place
    "disable_existing_loggers": False,
    # Custom handler config that gets log messages and outputs them to console
    'formatters': {
        'timestamp': {
            'format': '[{levelname} {asctime}] pid:{process:d} t:{thread:d} - {message}',
            'style': '{',
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "level": LOG_LEVEL,
            "formatter": "timestamp"
        },
    },
    "loggers": {
        # Send everything to console
        "": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
        },
    },
}

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER", "redis://redis:6379/0")
# os.environ.get("CELERY_BROKER", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = 'django-db'
CELERY_RESULT_EXTENDED = True


CELERY_TASK_DEFAULT_QUEUE = 'main_worker'
CELERY_TASK_DEFAULT_ROUTING_KEY = 'main_worker'

CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = False

CELERY_BEAT_SCHEDULE = {
    "check_deployment_active": {
        "task": "data_models.tasks.check_deployment_active",
        "schedule": crontab(minute="0", hour="*"),
    },
    "clean_local_storage": {
        "task": "data_models.tasks.clean_all_files",
        "schedule": crontab(hour="1", minute="0"),
    },
}

if not DEVMODE:
    CELERY_BEAT_SCHEDULE["check_device_status"] = {
        "task": "data_models.tasks.check_device_status",
        "schedule": crontab(hour="12", minute="0",
                            day_of_week="mon-fri"),
    },

DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': FILE_STORAGE_ROOT}

# SENSOR-PORTAL SETTINGS
# name of the global project all deployments will be added to.
GLOBAL_PROJECT_ID = os.environ.get("GLOBAL_PROJECT_ID", "GLOBAL")

# Automatically generated collection of data handlers.
DATA_HANDLERS = DataTypeHandlerCollection()

ONLY_SUPER_UNARCHIVE = True

# Maximum number of files that can be submitted to a job through the start_job API endpoint.
MAX_JOB_SIZE = 5000

# Minimum TAR size in GB when archiving.
MIN_ARCHIVE_SIZE_GB = 1

# Maximum TAR size in GB when archiving.
MAX_ARCHIVE_SIZE_GB = 10

if DEVMODE:
    # Smaller values for testing
    MIN_ARCHIVE_SIZE_GB = 0.01
    MAX_ARCHIVE_SIZE_GB = 0.025

# Taxon code which will be used when determining if a file has a human present from the file's observations.
HUMAN_TAXON_CODE = "2436436"

# path in FILE_STORAGE_ROOT where data packages will be saved
PACKAGE_PATH = "data_packages"


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_PORT = 465
EMAIL_USE_SSL = True


# Name of queue to use for ultralytics tasks.
ULTRALYTICS_QUEUE = 'ultralytics'
