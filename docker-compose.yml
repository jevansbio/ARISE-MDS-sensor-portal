services:
  sensor_portal_nginx:
    build: 
        context: .
        dockerfile: ./dockerfiles/sensor_portal_nginx.dockerfile
    ports:
        - "8080:80"
    depends_on:
      sensor_portal_django:
        condition: service_healthy
        restart: true
      sensor_portal_frontend:
        condition: service_started
        restart: true
    restart: always
    volumes:
      - /data/file_storage:/file_storage:z
  sensor_portal_frontend:
    build:
      context: .
      dockerfile: ./dockerfiles/sensor_portal_frontend.dockerfile
    image: sensor_portal_frontend_image
    ports:
      - '3000'
    command: npm start
    restart: always
    environment:
      - GLOBAL_PROJECT_ID=${GLOBAL_PROJECT_ID}
      - REACT_APP_API_BASE_URL=api
      - REACT_APP_CAPTCHA_SECRET_KEY=${CAPTCHA_SECRET_KEY}
      - REACT_APP_CAPTCHA_SITE_KEY=${CAPTCHA_SITE_KEY}
  sensor_portal_django:
    build:
      context: .
      dockerfile: ./dockerfiles/sensor_portal_django.dockerfile
    image: sensor_portal_django_image
    command: bash -c "gunicorn sensor_portal.wsgi:application --bind 0.0.0.0:8000  --worker-class gthread --workers 24 --threads=2 --timeout 120 --graceful-timeout 120 --max-requests 1200 --max-requests-jitter 50 --access-logfile -"
    volumes:
      - /data/file_storage:/media/file_storage:z
    ports:
      - "8000"
    environment:
      - PYTHONUNBUFFERED="TRUE"
      - GLOBAL_PROJECT_ID=${GLOBAL_PROJECT_ID}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DJANGO_CSRF=${DJANGO_CSRF}
      - DJANGO_CSRF_COOKIE_DOMAIN=${DJANGO_CSRF_COOKIE_DOMAIN}
      - CELERY_BROKER=${CELERY_BROKER}
      - CELERY_BACKEND=${CELERY_BACKEND}
      - FIELD_ENCRYPTION_KEY=${FIELD_ENCRYPTION_KEY}
      - DRF_RECAPTCHA_SECRET_KEY=${CAPTCHA_SECRET_KEY}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - ARISE_DSI_URL=${ARISE_DSI_URL}
      - ARISE_AUTHENTICATION_SERVER_URL=${ARISE_AUTHENTICATION_SERVER_URL}
      - OFFLINE_REFRESH_TOKEN=${OFFLINE_REFRESH_TOKEN}
    depends_on:
      sensor_portal_db:
        condition: service_healthy
        restart: true
      sensor_portal_redis:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/api || exit 1"]
      interval: 600s
      timeout: 120s
      retries: 5
    restart: always
  sensor_portal_worker:
    image: sensor_portal_django_image
    command: bash -c "celery -A sensor_portal worker --autoscale 10,1 --loglevel=INFO -Q main_worker"
    volumes:
      - /data/file_storage:/media/file_storage:z
    environment:
      - GLOBAL_PROJECT_ID=${GLOBAL_PROJECT_ID}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DJANGO_CSRF=${DJANGO_CSRF}
      - DJANGO_CSRF_COOKIE_DOMAIN=${DJANGO_CSRF_COOKIE_DOMAIN}
      - CELERY_BROKER=${CELERY_BROKER}
      - CELERY_BACKEND=${CELERY_BACKEND}
      - FIELD_ENCRYPTION_KEY=${FIELD_ENCRYPTION_KEY}
      - DRF_RECAPTCHA_SECRET_KEY=${CAPTCHA_SECRET_KEY}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - ARISE_DSI_URL=${ARISE_DSI_URL}
      - ARISE_AUTHENTICATION_SERVER_URL=${ARISE_AUTHENTICATION_SERVER_URL}
      - OFFLINE_REFRESH_TOKEN=${OFFLINE_REFRESH_TOKEN}
    depends_on:
      sensor_portal_db:
        condition: service_healthy
        restart: true
      sensor_portal_redis:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD-SHELL", "celery -A sensor_portal status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s 
    restart: always
  sensor_portal_beat:
    image: sensor_portal_django_image
    command: bash -c "celery -A sensor_portal beat --loglevel=INFO"
    environment:
      - GLOBAL_PROJECT_ID=${GLOBAL_PROJECT_ID}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DJANGO_CSRF=${DJANGO_CSRF}
      - DJANGO_CSRF_COOKIE_DOMAIN=${DJANGO_CSRF_COOKIE_DOMAIN}
      - CELERY_BROKER=${CELERY_BROKER}
      - CELERY_BACKEND=${CELERY_BACKEND}
      - FIELD_ENCRYPTION_KEY=${FIELD_ENCRYPTION_KEY}
      - DRF_RECAPTCHA_SECRET_KEY=${CAPTCHA_SECRET_KEY}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - ARISE_DSI_URL=${ARISE_DSI_URL}
      - ARISE_AUTHENTICATION_SERVER_URL=${ARISE_AUTHENTICATION_SERVER_URL}
      - OFFLINE_REFRESH_TOKEN=${OFFLINE_REFRESH_TOKEN}
    depends_on:
      sensor_portal_db:
        condition: service_healthy
        restart: true
      sensor_portal_redis:
        condition: service_healthy
        restart: true
    restart: always
  sensor_portal_db:
    image: postgis/postgis:14-3.3
    shm_size: 1g
    volumes:
      - /data/sensor_portal_db:/var/lib/postgresql/data:z
    environment:
      - POSTGRES_DB=${POSTGRES_NAME}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL",  "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 60s
      retries: 100
      start_period: 80s 
    restart: always
  sensor_portal_redis:
    image: "redis:alpine"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 60s
      retries: 100
      start_period: 80s    
    restart: always
  tabmon_r_studio:
    image: "rocker/rstudio"
    ports:
      - "8787"
    volumes:
      - /data/file_storage:/root:z
    environment:
      - PASSWORD=${R_STUDIO_PASSWORD}
    restart: always
volumes:
  /data/file_storage:
  /data/sensor_portal_db:
